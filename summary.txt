**** git 사용 인프런 스터디 (https://github.com/redsky0212/git_inflearn_study.git)
  - git remote연결 (git remote add origin git주소) ---> 현재폴더를 git저장소와 바로 연결한다.
  - git clone (git clone git주소) ---> 현재폴더의 아래쪽에 자식폴더가 생기면서 clone된다.
  - window자체의 git Bash를 사용하고자 할때는 시작메뉴검색에서 git Bash를 검색 후 실행해서 사용하면 됨.

----------------------------------------------------------------------------------
* https://git-scm.com 에서 다운로드 후 설치.
* https://codeonweb.com (여러가지 코딩 공부를 할 수 있는 사이트. 회원가입 필요.)

----------------------------------------------------------------------------------
* (git init) 깃 초기화 - git을 사용할 수 있게 하기위한 최초 초기화 단계
  - ls -al 명령어로 .git 폴더가 생성된것을 확인할 수 있다.

* (git add) 파일을 추가
  - vim 을 이용하여 파일을 생성하고 내용을 입력하기.
  - vim f1.txt 명령어를 실행하여 editor를 실행.
  - 'i'를 입력하면 입력모드 'esc'를 누르면 다시 나가기... 반복됨(한영주의 '한'일때는 안됨)
  - 'i'를 눌러 입력모드에서 내용을 입력 후 ':wq' 를 입력하여 저장하고 파일을 빠져 나간다.
  - 'cat 파일명' 을 입력하면 해당 파일의 내용을 볼 수 있다.
  - 'git add 파일명' ---> 버전관리를 위한 commit단계로 add한다. 이제부터 이 파일을 버전관리 한다는 의미.
  - 'git add .' ---> 수정된 파일이 여러개일경우 모든 것들을 다 add한다는 의미.

* 버전만들기 (commit)
  - 최초 버전을 만들때는 나의 정보를 셋팅해준다. (git config --global user.email hyun0238@gmail.com)
  - git add가 실행되어 commit을 할 수 있는 단계가 되면 
  - 'git commit' 명령어를 실행하면 vim이 실행되면서 메시지를 입력 할 수 있는 내용으로 바뀐다.
  - 메시지 입력 vim창에서 내용을 입력하고 :wq 빠져나오면 메시지가 저장되면 commit 이 실행된다.
  - 메시지가 잘 입력됬는지 확인하기 위하여 'git log' 명령어로 확인해 볼 수 있다.
  - commit과 동시에 메시지를 입력하고자 할때는 'git commit -m "메시지입력내용" ' 과 같이 입력하여 할 수 있다.

* git stage area(커밋 대기모드인 영역 파일들, add된 파일들...)
  - 여러개의 수정된 파일들이 있을경우 'git add' 된 파일들만 초록색으로 보이는데 그 파일들은 'commit' 대기 상태가 된다.

* 변경사항 확인하기 (log & diff)
  - 'git log ...여러가지옵션들' 뒤에 옵션들을 설정할 수 있다.
  - 'git log -p' ---> 커밋된 파일들의 각각의 소스상의 차이점을 눈으로 확인할 수 있다.
  - 'git log 고유한커밋id' ---> 커밋id를 옵션으로 넣어주면 해당커밋id 이전 내용만 보여준다.
  - 'git diff 고유한커밋id1..고유한커밋id2' ---> git diff명령어 뒤에 서로다른 id 두개를 '..'으로 연결해서 실행하면 서로의 차이점을 보여준다.
  - 'git diff' ---> 현재 수정된 내용들이 쫙 나온다. add되기 전에만 보인다.

* 과거로 돌아가기 (reset)
  - 커밋되어있는 버전들 중 원하는 커밋버전으로 이동하는 명령어 (git reset 커밋id --hard)
  - 추 후 모든 작업자에 공유된 이후 (push한 후) 에는 reset을 하면 안됨. 본인의 컴퓨터에 있을경우에만 reset함.
* 과거로 돌아가기 (revert)
  - 추 후 스터디 하면 된다고 함. ^^

* 기본적인 git명령어에서 추가로 필요한 명령어를 찾아 스터디 하기위한 방법
  - 예를 들어 commit 에 대한 메뉴얼을 찾기 위해서는 (git commit --help) 명령어를 쳐서 메뉴얼을 보고 공부하는 습관이 필요하다.
-------------------------------------------------------------------------------

--- git의 원리 --------------------------------------
* 분석도구 gistory 소개
  - git의 .git 폴더 밑의 여러가지 구조를  분석해주는 도구이다.

* git의 object파일명의 원리
  - object파일명은 (sha-1 hash알고리즘을 이용한)형태로 변환된 text이다.
  - git add명령어를 실행하면 해당 파일의 내용과 몇가지 부가정보를 합쳐서 sha-1을 통과시켜서 생선된 text로 저장된다.

* commit의 원리
  - 수정된 파일을 add하면 stage(index)에 등록이 되고 commit 하면 local repository에 들어간다.
  - 최종 remote repository에 넣는과정은 또 다른 명령 tree이므로 다음에 스터디.

--- branch(가지) -----------------------------------------
* branch 만들기
  - ( git branch 브랜치명 ) 새로운 브랜치를 만든다.
  - 브랜치 이동은 ( git checkout 브랜치명 ) 으로 이동한다.

* branch 정보확인
  - ( git log ) 기본적으로 현재 브랜치의 로그정보만 보여준다.
  - ( git log --branches --decorate ) 현재 브랜치의 위치와 master브랜치의 위치등을 알 수 있다.
  - ( git log --branches --decorate --graph ) 그래프의 흐름 모양을 선으로 알 수 있다.
  - ( git log --branches --decorate --graph --oneline ) 흐름을 하나의 줄로 보여준다.
  - 소스트리를 GUI로 브라우져로 보여주는 도구를 사용하면 편하게 볼수있다.
  - ( git log master..exp ) 서로다른 브랜치의 다른점을 보고자 할때 .
  - ( git log -p master..exp )  브랜치간의 다른점을 소스까지 보고자 할때 -p 옵션을 쓴다.

* branch 병합
  - exp에서 master브랜치로 병합하기. (master로 checkout한 후 git merge exp 한다.)
  - master에서 exp로 병합하기. (exp로 checkout한 후 git merge master 한다.)
  - exp브랜치 지우기 
     ---> master브랜치로 이동 후 (git branch -d exp) exp브랜치 지우는 명령.

      *** git-scm.com 메뉴얼 참조 예제 *******(https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging)
     ex) --------------------------------------------------------------------------------------------------------
     --master ---- branch2     -->    ---- c1 ---- c2 (master, branch2)    -->    ---- c1 ---- c2 (master)
         \_____ branch1                     \_____ branch1                              \____branch1

      이런 상황일때 checkout master에서 branch2를 merge 하면 master에 branch2가 머지 되고 커밋위치가 branch2로이동(Fast-forward) 된다.
      그리고 branch2와 master는 모든게 같기때문에 branch2를 삭제(git branch -d branch2)한다.
     ex) --------------------------------------------------------------------------------------------------------
     ex2) --------------------------------------------------------------------------------------------------------
         ---- c1 ---- c2 (master)                 -->       ----- c1 ----- c2 ------------------ c5 (master)(merge된 소스)
               \_____ c3 ______ c4 (branch1)                       \______ c3 _____ c4(branch1) ________/                                                                             
        branch1을 master로 merge하려고 할때 master가 변화가 생겨있는 상태일때는 master의 커밋상태는 또다른 커밋상태를 만들어서 merge된다.
        * 다른파일들은 문제없이 합쳐져서 merge된다.
     ex2) --------------------------------------------------------------------------------------------------------

* stash (working 디렉토리에 감춘다.)
  - 현재 작업중인 branch의 상태가 작업중이면서 커밋하기도 애매한 상황일때. stash 를 이용하여 현재 작업중인 커밋상태를 숨겨놓고 최후 커밋 head를 이용하여 새로운 브랜치를 만들 수 있다.
  - git stash save ( 현재 수정 상태를 저장한다. )
  - git stash apply ( 저장되어있는 수정값을 가져와 반영한다(맨위에 stash값). )
  - git stash drop ( 최신 stash값을 삭제한다. )
  - git stash list ( 저장되어있는 stash 값 )

* branch 충돌해결
  - 다른 branch의 같은 파일을 수정하고 두개의 branch를 merge를 할경우 충돌이 발생한다.
  - 현재 branch(HEAD)가 위치한 브랜치에서 충돌이 발생한 파일을 열고 <<<<<<HEAD로 생성된 소스를 알맞게 수정하고 저장한다.
  - 수정 후 ' git add 파일명 ' 실행하여 add하면 파일이 초록색으로 바뀐다.
  - 최종 'git commit'을 실행하여 마무리한다.

* reset checkout
  - ( git reset --hard 커밋id ) 실행한 커밋으로 reset된다. (현재 branch의 최신커밋을 바꾸는 행위)
  - 실행한 reset을 다시 취소하고싶을때. ( git reset --hard ORIG_HEAD )  --> ORIG_HEAD는 모든 커밋행위를 기록해놓은곳.
  - ( git reflog ) 현재까지 모든 실행 명령을 볼 수 있다.

* git reset의 옵션에 관하여
  - git reset --soft  커밋된것만 reset하고(repository만 삭제) staging 쪽에는 그대로 남아있다.
  - git reset --mixed 커밋과, stagin이 reset되고 working directory에는 그대로 남아있다.
  - git reset --hard   모든 영역이 초기화 된다.

* merge & 충돌(conflict)
  - 충돌이 발생시 직접 파일을 수정할 수도 있지만 여기서는 그렇게 하지 않고 툴을 사용해본다.
  - git config --global merge.tool kdiff3(운영체제마다 다르므로 검색해서 셋팅을 해야한다.)
